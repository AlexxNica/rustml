#!/usr/bin/env python

import subprocess, os, sys

print "calling cargo to create new project pipeline ..."
subprocess.call(["cargo", "new", "--bin", "pipeline"])

if not os.path.exists("pipeline"):
	print "Could not create pipeline. Is 'cargo' in the search path?"
	sys.exit(1)

# -----------------------------------------------------------

print "updating pipeline/Cargo.toml ..."
f = open("pipeline/Cargo.toml", "a")
print >> f, """

[[bin]]
name = "example"
path = "bin/example.rs"

[dependencies]
rustc-serialize = "0.3"
"""
f.close()

# -----------------------------------------------------------

print "removing pipeline/src/main.rs ..."
print "creating pipeline/bin/example.rs ..."
os.remove("pipeline/src/main.rs")
os.makedirs("pipeline/bin")
f = open("pipeline/bin/example.rs", "w")
print >> f, """extern crate pipeline;

use std::fs::File;
use std::io::Write;

fn main() {
    let c = pipeline::read_config().unwrap();

    // open the file where the result should be written to
    let mut f = File::create(c.target).unwrap();

    // read parameters
    let max = c.params.get("max").unwrap().parse::<usize>().unwrap();
    let mut seed = c.params.get("seed").unwrap().parse::<usize>().unwrap();
    let mut n = c.params.get("n").unwrap().parse::<usize>().unwrap();

    while n > 0 {
        n -= 1;
        // pseudo random number
        seed = (1103515245 * seed + 12345) % 2147483648;
        writeln!(f, "{}", seed % max).unwrap();
    }
}"""
f.close()

# -----------------------------------------------------------

print "creating pipeline/config.json ..."
f = open("pipeline/config.json", "w")
print >> f, """{
    "targets": ["OUTPUT_SORTED"],

    "stages": {
        "RANDOM_NUMBERS": {
            "dependencies": {
                "src": "bin/example.rs"
            },
            "params": {
                "seed": "314",
                "max": "30",
                "n": "10"
            },
            "command": "cargo run --bin example"
        },


        "OUTPUT_SORTED": {
            "dependencies": {
                "file1": "RANDOM_NUMBERS"
            },
            "params": {
            },
            "command": "cat $< | sort -n > $@",
            "comment": "$< is the name of the first dependency; WARNING: ordering could be different"
        }
    }
}"""
f.close()

# -----------------------------------------------------------

print "creating pipeline/src/lib.rs ..."
f = open("pipeline/src/lib.rs", "w")
print >> f, """extern crate rustc_serialize;

use rustc_serialize::json;
use std::env;
use std::io::{Result, Read, Error, ErrorKind};
use std::fs::File;
use std::collections::BTreeMap;

#[derive(RustcDecodable, RustcEncodable)]
pub struct Config {
    pub dependencies: BTreeMap<String, String>,
    pub params: BTreeMap<String, String>,
    pub command: String,
    pub target: String
}

pub fn read_config() -> Result<Config> {

    match env::var("PIPELINE_CONFIG") {
        Ok(configpath) => {
            match File::open(configpath) {
                Ok(mut f) => {
                    let mut s = String::new();
                    match f.read_to_string(&mut s) {
                    Ok(_n) => {
                        match json::decode(&s) {
                        Ok(j)  => Ok(j),
                        Err(e) => Err(Error::new(ErrorKind::Other, e))
                        }
                    }
                    Err(e) => Err(e)
                    }
                }
                Err(e) => Err(e)
            }
        },
        Err(e) => Err(Error::new(ErrorKind::Other, e))
    }
}"""
f.close()

print "done"
print
print "You can now change into the directory 'pipeline' and may execute"
print "'pipe_config config.json' to create the dependencies. Then type"
print "'make' to run the pipeline."
print
